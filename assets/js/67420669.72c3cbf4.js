"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[447],{11611:a=>{a.exports=JSON.parse('{"functions":[{"name":"pickRandom","desc":"Get a random value from an array.\\n\\n\\t","params":[{"name":"tbl","desc":"Table to pick from.","lua_type":"{ T }"},{"name":"except","desc":"A value from the tbl you don\'t want picked.","lua_type":"T?"}],"returns":[{"desc":"the picked value.","lua_type":"T"}],"function_type":"static","source":{"line":14,"path":"src/TableUtil.lua"}},{"name":"arrToOrderLUT","desc":"Returns a dictionary with each key as the value with the given array index as the value.\\n\\n{\\"a\\", \\"b\\", \\"c\\"} => {[\\"a\\"] = 1, [\\"b\\"] = 2, [\\"c\\"] = 3}\\n\\n\\t","params":[{"name":"arr","desc":"array to convert","lua_type":"{[number]: T}"}],"returns":[{"desc":"mapped dictionary","lua_type":"{[T]: number}"}],"function_type":"static","source":{"line":40,"path":"src/TableUtil.lua"}},{"name":"arrayToDict","desc":"Returns a dictionary with each key mapped to its exact value. Useful for making custom enums.\\n\\n{\\"a\\", \\"b\\", \\"c\\"} => {[\\"a\\"] = \\"a\\", [\\"b\\"] = \\"b\\", [\\"c\\"] = \\"c\\"}\\n\\n\\t","params":[{"name":"arr","desc":"array to convert","lua_type":"{T}"}],"returns":[{"desc":"mapped dictionary","lua_type":"{[T]: T}"}],"function_type":"static","source":{"line":59,"path":"src/TableUtil.lua"}},{"name":"arrayToCustomDict","desc":"Returns a dictionary with each key mapped to each value and each value the result of a function. \\n\\n{\\"a\\", \\"b\\", \\"c\\"} => {[\\"a\\"] = map(\\"a\\"), [\\"b\\"] = map(\\"b\\"), [\\"c\\"] = map(\\"c\\")}\\n\\n\\t","params":[{"name":"arr","desc":"array to convert","lua_type":"{T}"},{"name":"map","desc":"mapper function","lua_type":"(number, T) -> T"}],"returns":[{"desc":"mapped dictionary","lua_type":"{[T]: T}"}],"function_type":"static","source":{"line":79,"path":"src/TableUtil.lua"}},{"name":"getValues","desc":"Returns all the values out of a dictionary as an array.\\n\\n\\t","params":[{"name":"dict","desc":"input dictionary","lua_type":"{[any]: T}"}],"returns":[{"desc":"output array with all values.","lua_type":"{ T }"}],"function_type":"static","source":{"line":96,"path":"src/TableUtil.lua"}},{"name":"filter","desc":"Returns an array with only values that get a truthy result from the predicate function.\\n\\n\\t","params":[{"name":"t","desc":"input array (must be an array)","lua_type":"{ T }"},{"name":"predicate","desc":"","lua_type":"(key: any, value: T) -> boolean"}],"returns":[{"desc":"output array with only predicate truthy values.","lua_type":"{ T }"}],"function_type":"static","source":{"line":112,"path":"src/TableUtil.lua"}},{"name":"map","desc":"Returns an array/dictionary with each value converted into a value returned from a mapper function.\\n\\n\\t","params":[{"name":"t","desc":"input array (must be an array)","lua_type":"{ T }"},{"name":"mapper","desc":"function that returns a new value.","lua_type":"(key: any, value: T) -> boolean"}],"returns":[{"desc":"output array with only predicate truthy values.","lua_type":"{ T }"}],"function_type":"static","source":{"line":132,"path":"src/TableUtil.lua"}},{"name":"filter_map_dict","desc":"Combined the filter and map functions together to create a new table that only has filter_mapper values that are truthy. This works on dictionaries, but it can leave holes in an array.\\n\\n\\t","params":[{"name":"t","desc":"input array (must be an array)","lua_type":"{ T }"},{"name":"filter_mapper","desc":"function that returns a new value.","lua_type":"(key: T, value: U) -> any?"}],"returns":[{"desc":"output array with only predicate truthy values.","lua_type":"{ [T]: any }"}],"function_type":"static","source":{"line":150,"path":"src/TableUtil.lua"}},{"name":"filter_map","desc":"Combined the filter and map functions together to create a new table that only has filter_mapper values that are truthy. This works on dictionaries, but it can leave holes in an array.\\n\\n\\t","params":[{"name":"t","desc":"input array (must be an array)","lua_type":"{ [number]: U }"},{"name":"filter_mapper","desc":"function that returns a new value.","lua_type":"(key: T, value: U) -> any?"}],"returns":[{"desc":"output array with only predicate truthy values.","lua_type":"{ [T]: any }"}],"function_type":"static","source":{"line":171,"path":"src/TableUtil.lua"}},{"name":"reduce","desc":"On each member of an array/dictionary accumulate a value based on array/dictionary values.\\n\\n\\t","params":[{"name":"t","desc":"input array (must be an array)","lua_type":"{ [number]: U }"},{"name":"reducer","desc":"function that takes in and returns the accumulator.","lua_type":"(accumulator: U, value: T, key: any) -> U"},{"name":"initialValue","desc":"The value the accumulator starts at.","lua_type":"U"}],"returns":[{"desc":"output array with only predicate truthy values.","lua_type":"{ [T]: any }"}],"function_type":"static","source":{"line":192,"path":"src/TableUtil.lua"}},{"name":"find","desc":"Search for and return the first value that returns a truthy value from the predicate.\\n\\n\\t","params":[{"name":"t","desc":"input array/dictionary","lua_type":"{T}"},{"name":"predicate","desc":"","lua_type":"(value: T) -> boolean"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"static","source":{"line":210,"path":"src/TableUtil.lua"}},{"name":"findIndex","desc":"Search for and return the first index that returns a truthy value from the predicate.\\n\\n\\t","params":[{"name":"t","desc":"input array/dictionary","lua_type":"{ [U]:T }"},{"name":"predicate","desc":"","lua_type":"(value: T) -> boolean"}],"returns":[{"desc":"","lua_type":"U?"}],"function_type":"static","source":{"line":228,"path":"src/TableUtil.lua"}},{"name":"filter_map_no_duplicates","desc":"Filter map, however it only adds values to the return table that haven\'t been added before.\\n\\n\\t","params":[{"name":"t","desc":"input array/dictionary","lua_type":"{ [T]: U }"},{"name":"filter_mapper","desc":"function takes in key, value returns anything.","lua_type":"(T, U) -> any"}],"returns":[{"desc":"","lua_type":"{ [T]: U }"}],"function_type":"static","source":{"line":246,"path":"src/TableUtil.lua"}},{"name":"weightedRandom","desc":"Given two arrays of possible values, and weights for each of those values, pick one entry at random.\\n\\n\\t","params":[{"name":"values","desc":"input array/dictionary to pick from","lua_type":"{ T }"},{"name":"weights","desc":"input weights table whose indicies match to values.","lua_type":"{ number }"}],"returns":[{"desc":"a weighted randomly picked value.","lua_type":"T"}],"function_type":"static","source":{"line":273,"path":"src/TableUtil.lua"}}],"properties":[],"types":[],"name":"TableUtil","desc":"","source":{"line":4,"path":"src/TableUtil.lua"}}')}}]);