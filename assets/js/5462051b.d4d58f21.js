"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[696],{79795:e=>{e.exports=JSON.parse('{"functions":[{"name":"weldBetween","desc":"This function creates a weld between two parts.\\nPlaces weld inside of Part0.","params":[{"name":"a","desc":"The first part, Part0","lua_type":"BasePart"},{"name":"b","desc":"If you want the weld to have no offset.","lua_type":"boolean?"},{"name":"inPlace","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"Return the weld.","lua_type":"Weld"}],"function_type":"static","source":{"line":29,"path":"src/init.lua"}},{"name":"requireDescendants","desc":"Simple require every module descendant function.","params":[{"name":"parent","desc":"The instance to search for descendants in.","lua_type":"Instance"}],"returns":[],"function_type":"static","source":{"line":44,"path":"src/init.lua"}},{"name":"getAnimationTrack","desc":"Given an animator and an animationId it searches through playing tracks to find the one with the animationId.","params":[{"name":"animator","desc":"target Animator instance","lua_type":"Animator"},{"name":"animationId","desc":"the animationId for the Animation you want to find.","lua_type":"string"}],"returns":[{"desc":"returns the animation track if it finds one.","lua_type":"AnimationTrack?"}],"function_type":"static","source":{"line":62,"path":"src/init.lua"}},{"name":"evalNumberSequence","desc":"Given a number sequence and a t value it finds what number would be returned at that point in the number sequence. Will not account for number sequence Envelopes.","params":[{"name":"ns","desc":"Input number sequence","lua_type":"NumberSequence"},{"name":"t","desc":"Scale value","lua_type":"number"}],"returns":[{"desc":"returns number sequence value.","lua_type":"number"}],"function_type":"static","source":{"line":79,"path":"src/init.lua"}},{"name":"scaleNumberSequence","desc":"Given a number sequence and a scaleFactor number it returns a new number sequence with all keypoints values scaled by the scale factor.","params":[{"name":"numberSequence","desc":"Input number sequence","lua_type":"NumberSequence"},{"name":"scaleFactor","desc":"A multiplier for all number sequence values.","lua_type":"number"}],"returns":[{"desc":"returns NumberSequence with scaled keypoints.","lua_type":"NumberSequence"}],"function_type":"static","source":{"line":105,"path":"src/init.lua"}},{"name":"TweenModel","desc":"Given a model and tween information it returns a new tween that will pivot the model as the tween changes. The goal must have a CFrame value.","params":[{"name":"model","desc":"the input model","lua_type":"Model"},{"name":"tweenInfo","desc":"the tween information for the tween.","lua_type":"TweenInfo"},{"name":"goal","desc":"a table with a CFrame value.","lua_type":"{CFrame: CFrame}"}],"returns":[{"desc":"","lua_type":"Tween"}],"function_type":"static","source":{"line":127,"path":"src/init.lua"}},{"name":"weldAllToPrimaryPart","desc":"Find all children of a model and weld all parts to the PrimaryPart.","params":[{"name":"model","desc":"model that has a PrimaryPart","lua_type":"Model"}],"returns":[],"function_type":"static","source":{"line":147,"path":"src/init.lua"}},{"name":"makePartBetween","desc":"Create a new part that is placed and scaled between two positions a and b.","params":[{"name":"a","desc":"The first position","lua_type":"Vector3"},{"name":"b","desc":"The second position","lua_type":"Vector3"}],"returns":[{"desc":"the returned part","lua_type":"Part"}],"function_type":"static","source":{"line":165,"path":"src/init.lua"}},{"name":"regularPolygon","desc":"Create a 2D regular polygon of parts given the radius and number of sides.","params":[{"name":"n","desc":"the number of sides of the polygon.","lua_type":"number"},{"name":"radius","desc":"the radius of the polygon.","lua_type":"number"},{"name":"height","desc":"how tall you want the parts to be that make up the polygon.","lua_type":"number"}],"returns":[{"desc":"the model that contains all the parts of the polygon.","lua_type":"Model"}],"function_type":"static","source":{"line":184,"path":"src/init.lua"}},{"name":"playSound","desc":"Create a sound clone, parent it, and remove it when its finished. If it loops this will never destroy the sound.","params":[{"name":"sound","desc":"the sound you want to clone/play.","lua_type":"Sound"},{"name":"parent","desc":"the place you want the sound to play from.","lua_type":"Instance"}],"returns":[{"desc":"the sound clone that was created.","lua_type":"Sound"}],"function_type":"static","source":{"line":208,"path":"src/init.lua"}},{"name":"fireAllExcept","desc":"Fire all clients with a remove event except for a single player.","params":[{"name":"remoteEvent","desc":"the remote event for fire.","lua_type":"RemoteEvent"},{"name":"ignore","desc":"the player to not fire","lua_type":"Player"},{"name":"...","desc":"various arguments to be passed down.","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":226,"path":"src/init.lua"}},{"name":"waitFixed","desc":"Fire all clients with a remove event except for a single player.","params":[{"name":"duration","desc":"","lua_type":"number"},{"name":"startTime","desc":"","lua_type":"number"}],"returns":[],"function_type":"static","ignore":true,"source":{"line":242,"path":"src/init.lua"}},{"name":"runAsyncAwait","desc":"Equivalent of a Promise.allSettled. This will run the function on every entry in an array in a new thread and wait until all threads have settled before moving on.","params":[{"name":"t","desc":"input table","lua_type":"{}"},{"name":"func","desc":"function to run on every table entry","lua_type":"(...any?) -> ()"}],"returns":[],"function_type":"static","yields":true,"source":{"line":257,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"OrthoUtil","desc":"The main tool library.","source":{"line":14,"path":"src/init.lua"}}')}}]);