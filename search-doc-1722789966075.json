[{"title":"Introduction","type":0,"sectionRef":"#","url":"/OrthoUtil/docs/intro","content":"Introduction In development you run into a lot of common problems that have known general solutions. This module is built by Ortho Games as a way to keep all our most useful functions in one place and make them available to the public. What kinds of things are in here? OrthoUtil is a util of many functions that span across all possible use cases. Function UtilitiesTable UtilitiesMath UtilitiesMisc Utilities Installation We use wally in order to manage our package dependency. Add this line to your wally.toml file and then run wally install. orthoutil = &quot;ortho-games/orthoutil@1.0.0&quot; ","keywords":""},{"title":"FunctionUtil","type":0,"sectionRef":"#","url":"/OrthoUtil/api/FunctionUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#functions","content":" "},{"title":"partial​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#partial","content":"&lt;/&gt; FunctionUtil.partial( func: (...any) → any,-- input function ...: any-- arguments you want to be passedin first to func ) → (...any) → any Create a new function that passes in the given parameters to the given function first.  "},{"title":"playServer​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#playServer","content":"&lt;/&gt; FunctionUtil.playServer( func: ((...any) → any) | thread,-- input function ...: any-- params passed into func ) → thread?-- returned thread or nothing if on client. Create a new function that will only play on the server on a new thread.  "},{"title":"playClient​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#playClient","content":"&lt;/&gt; FunctionUtil.playClient( func: ((...any) → any) | thread,-- input function ...: any-- params passed into func ) → thread?-- returned thread or nothing if on server. Create a new function that will only play on the client on a new thread.  "},{"title":"playForPlayer​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#playForPlayer","content":"&lt;/&gt; FunctionUtil.playForPlayer( player: Player ,-- player you want this function to play for func: ((...any) → any) | thread,-- input function ...: any-- params passed into func ) → thread?-- returned thread or nothing if on server. Create a new function that will only play on the client on a new thread.  "},{"title":"debounce​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#debounce","content":"&lt;/&gt; FunctionUtil.debounce( func: (...any) → any-- input function ) → (...any) → () Returns a function that cannot run while the previous call is still running.  "},{"title":"timeIt​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#timeIt","content":"&lt;/&gt; FunctionUtil.timeIt( name: string,-- the text you want to display on output. func: () → () ) → () Executes a function and prints how long it took to execute.  "},{"title":"timeItWarn​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#timeItWarn","content":"&lt;/&gt; FunctionUtil.timeItWarn( name: string,-- the text you want to display on output. func: () → () ) → () Executes a function and warnm how long it took to execute.  "},{"title":"memoize​","type":1,"pageTitle":"FunctionUtil","url":"/OrthoUtil/api/FunctionUtil#memoize","content":"&lt;/&gt; FunctionUtil.memoize( fn: (...any) → T)-- the text you want to display on output. ) → (...any) → T Executes a function and prints how long it took to execute. "},{"title":"MathUtil","type":0,"sectionRef":"#","url":"/OrthoUtil/api/MathUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#functions","content":" "},{"title":"slerp​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#slerp","content":"&lt;/&gt; MathUtil.slerp( angle1: number,-- The first angle in radians angle2: number,-- The target angle in radians t: number-- a number between 0 and 1 indicating the blend between angle1 and angle2 ) → number-- the interpolated angle This function is like lerp but for angles.  "},{"title":"scale​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#scale","content":"&lt;/&gt; MathUtil.scale( v: number,-- input number. inMin: number,-- the lower range that we want to assume v falls into. inMax: number,-- the upper range that we want to assume v falls into. outMin: number,-- the lower range that we want to map v to. outMax: number-- the upper range that we want to map v to. ) → number-- Returns the scaled number. Maps number v, within range inMin inMax to range outMin outMax  "},{"title":"scaleClamp​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#scaleClamp","content":"&lt;/&gt; MathUtil.scaleClamp( v: number,-- input number. inMin: number,-- the lower range that we want to assume v falls into. inMax: number,-- the upper range that we want to assume v falls into. outMin: number,-- the lower range that we want to map v to. outMax: number-- the upper range that we want to map v to. ) → number-- Returns the scaled number. This works the same as scale, but it slams the value at the end to the out range.  "},{"title":"next​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#next","content":"&lt;/&gt; MathUtil.next( value: number,-- the current value we want to increment. increment: number,-- the number you want to add to value. wrap: number-- the higher number there can be that you want to wrap around if you go past. ) → number-- returns value + increment wrapped around [0, wrap]. Increment a value such that it wraps around a set range. Useful for cycling array indicies.  "},{"title":"prev​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#prev","content":"&lt;/&gt; MathUtil.prev( value: number,-- the current value we want to increment. decrement: number,-- the number you want to subtract from value. wrap: number-- the higher number there can be that you want to wrap around if you go past. ) → number-- returns value - increment wrapped around [0, wrap]. Decrement a value such that it wraps around a set range. Useful for cycling array indicies.  "},{"title":"squareMag​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#squareMag","content":"&lt;/&gt; MathUtil.squareMag( vector: Vector3 -- Input vector you want to get the distance of. ) → number-- The magnitude value without square root. Get the squared magnitude version of a vector to save on computation. Useful for magnitude comparisons.  "},{"title":"isBetweenVectors​","type":1,"pageTitle":"MathUtil","url":"/OrthoUtil/api/MathUtil#isBetweenVectors","content":"unreleased &lt;/&gt; MathUtil.isBetweenVectors( origin: Vector3 ,-- The start point of a triangle. a: Vector3 ,-- the far left angle of the triangle from the origin. b: Vector3 ,-- the far right angle of the triangle from the origin. target: Vector3 -- the target's position. ) → boolean Determines if target is within the triangle origin - a - b. "},{"title":"OrthoUtil","type":0,"sectionRef":"#","url":"/OrthoUtil/api/OrthoUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#functions","content":" "},{"title":"weldBetween​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#weldBetween","content":"&lt;/&gt; OrthoUtil.weldBetween( a: BasePart ,-- The first part, Part0 b: boolean?,-- If you want the weld to have no offset. inPlace: boolean? ) → Weld -- Return the weld. This function creates a weld between two parts. Places weld inside of Part0.  "},{"title":"requireDescendants​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#requireDescendants","content":"&lt;/&gt; OrthoUtil.requireDescendants( parent: Instance -- The instance to search for descendants in. ) → () Simple require every module descendant function.  "},{"title":"getAnimationTrack​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#getAnimationTrack","content":"&lt;/&gt; OrthoUtil.getAnimationTrack( animator: Animator ,-- target Animator instance animationId: string-- the animationId for the Animation you want to find. ) → AnimationTrack? -- returns the animation track if it finds one. Given an animator and an animationId it searches through playing tracks to find the one with the animationId.  "},{"title":"evalNumberSequence​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#evalNumberSequence","content":"&lt;/&gt; OrthoUtil.evalNumberSequence( ns: NumberSequence ,-- Input number sequence t: number-- Scale value ) → number-- returns number sequence value. Given a number sequence and a t value it finds what number would be returned at that point in the number sequence. Will not account for number sequence Envelopes.  "},{"title":"scaleNumberSequence​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#scaleNumberSequence","content":"&lt;/&gt; OrthoUtil.scaleNumberSequence( numberSequence: NumberSequence ,-- Input number sequence scaleFactor: number-- A multiplier for all number sequence values. ) → NumberSequence -- returns NumberSequence with scaled keypoints. Given a number sequence and a scaleFactor number it returns a new number sequence with all keypoints values scaled by the scale factor.  "},{"title":"TweenModel​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#TweenModel","content":"&lt;/&gt; OrthoUtil.TweenModel( model: Model ,-- the input model tweenInfo: TweenInfo ,-- the tween information for the tween. goal: {CFrame: CFrame }-- a table with a CFrame value. ) → Tween  Given a model and tween information it returns a new tween that will pivot the model as the tween changes. The goal must have a CFrame value.  "},{"title":"weldAllToPrimaryPart​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#weldAllToPrimaryPart","content":"&lt;/&gt; OrthoUtil.weldAllToPrimaryPart( model: Model -- model that has a PrimaryPart ) → () Find all children of a model and weld all parts to the PrimaryPart.  "},{"title":"makePartBetween​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#makePartBetween","content":"&lt;/&gt; OrthoUtil.makePartBetween( a: Vector3 ,-- The first position b: Vector3 -- The second position ) → Part -- the returned part Create a new part that is placed and scaled between two positions a and b.  "},{"title":"regularPolygon​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#regularPolygon","content":"&lt;/&gt; OrthoUtil.regularPolygon( n: number,-- the number of sides of the polygon. radius: number,-- the radius of the polygon. height: number-- how tall you want the parts to be that make up the polygon. ) → Model -- the model that contains all the parts of the polygon. Create a 2D regular polygon of parts given the radius and number of sides.  "},{"title":"playSound​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#playSound","content":"&lt;/&gt; OrthoUtil.playSound( sound: Sound ,-- the sound you want to clone/play. parent: Instance -- the place you want the sound to play from. ) → Sound -- the sound clone that was created. Create a sound clone, parent it, and remove it when its finished. If it loops this will never destroy the sound.  "},{"title":"fireAllExcept​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#fireAllExcept","content":"&lt;/&gt; OrthoUtil.fireAllExcept( remoteEvent: RemoteEvent ,-- the remote event for fire. ignore: Player ,-- the player to not fire ...: any-- various arguments to be passed down. ) → () Fire all clients with a remove event except for a single player.  "},{"title":"runAsyncAwait​","type":1,"pageTitle":"OrthoUtil","url":"/OrthoUtil/api/OrthoUtil#runAsyncAwait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; OrthoUtil.runAsyncAwait( t: {},-- input table func: (...any?) → ()-- function to run on every table entry ) → () Equivalent of a Promise.allSettled. This will run the function on every entry in an array in a new thread and wait until all threads have settled before moving on. "},{"title":"TableUtil","type":0,"sectionRef":"#","url":"/OrthoUtil/api/TableUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#functions","content":" "},{"title":"pickRandom​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#pickRandom","content":"&lt;/&gt; TableUtil.pickRandom( tbl: {T},-- Table to pick from. except: T?-- A value from the tbl you don't want picked. ) → T-- the picked value. Get a random value from an array.  "},{"title":"arrToOrderLUT​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#arrToOrderLUT","content":"&lt;/&gt; TableUtil.arrToOrderLUT( arr: {[number]: T}-- array to convert ) → {[T]: number}-- mapped dictionary Returns a dictionary with each key as the value with the given array index as the value. {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;} =&gt; {[&quot;a&quot;] = 1, [&quot;b&quot;] = 2, [&quot;c&quot;] = 3}  "},{"title":"arrayToDict​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#arrayToDict","content":"&lt;/&gt; TableUtil.arrayToDict( arr: {T}-- array to convert ) → {[T]: T}-- mapped dictionary Returns a dictionary with each key mapped to its exact value. Useful for making custom enums. {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;} =&gt; {[&quot;a&quot;] = &quot;a&quot;, [&quot;b&quot;] = &quot;b&quot;, [&quot;c&quot;] = &quot;c&quot;}  "},{"title":"arrayToCustomDict​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#arrayToCustomDict","content":"&lt;/&gt; TableUtil.arrayToCustomDict( arr: {T},-- array to convert map: ( number, T ) → T-- mapper function ) → {[T]: T}-- mapped dictionary Returns a dictionary with each key mapped to each value and each value the result of a function. {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;} =&gt; {[&quot;a&quot;] = map(&quot;a&quot;), [&quot;b&quot;] = map(&quot;b&quot;), [&quot;c&quot;] = map(&quot;c&quot;)}  "},{"title":"getValues​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#getValues","content":"&lt;/&gt; TableUtil.getValues( dict: {[any]: T}-- input dictionary ) → {T}-- output array with all values. Returns all the values out of a dictionary as an array.  "},{"title":"filter​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#filter","content":"&lt;/&gt; TableUtil.filter( t: {T},-- input array (must be an array) predicate: ( key: any, value: T ) → boolean ) → {T}-- output array with only predicate truthy values. Returns an array with only values that get a truthy result from the predicate function.  "},{"title":"map​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#map","content":"&lt;/&gt; TableUtil.map( t: {T},-- input array (must be an array) mapper: ( key: any, value: T ) → boolean-- function that returns a new value. ) → {T}-- output array with only predicate truthy values. Returns an array/dictionary with each value converted into a value returned from a mapper function.  "},{"title":"filter_map_dict​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#filter_map_dict","content":"&lt;/&gt; TableUtil.filter_map_dict( t: {T},-- input array (must be an array) filter_mapper: ( key: T, value: U ) → any?-- function that returns a new value. ) → {[T]: any}-- output array with only predicate truthy values. Combined the filter and map functions together to create a new table that only has filter_mapper values that are truthy. This works on dictionaries, but it can leave holes in an array.  "},{"title":"filter_map​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#filter_map","content":"&lt;/&gt; TableUtil.filter_map( t: {[number]: U},-- input array (must be an array) filter_mapper: ( key: T, value: U ) → any?-- function that returns a new value. ) → {[T]: any}-- output array with only predicate truthy values. Combined the filter and map functions together to create a new table that only has filter_mapper values that are truthy. This works on dictionaries, but it can leave holes in an array.  "},{"title":"reduce​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#reduce","content":"&lt;/&gt; TableUtil.reduce( t: {[number]: U},-- input array (must be an array) reducer: ( accumulator: U, value: T, key: any ) → U,-- function that takes in and returns the accumulator. initialValue: U-- The value the accumulator starts at. ) → {[T]: any}-- output array with only predicate truthy values. On each member of an array/dictionary accumulate a value based on array/dictionary values.  "},{"title":"find​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#find","content":"&lt;/&gt; TableUtil.find( t: {T},-- input array/dictionary predicate: (value: T) → boolean ) → T? Search for and return the first value that returns a truthy value from the predicate.  "},{"title":"findIndex​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#findIndex","content":"&lt;/&gt; TableUtil.findIndex( t: {[U]:T},-- input array/dictionary predicate: (value: T) → boolean ) → U? Search for and return the first index that returns a truthy value from the predicate.  "},{"title":"filter_map_no_duplicates​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#filter_map_no_duplicates","content":"&lt;/&gt; TableUtil.filter_map_no_duplicates( t: {[T]: U},-- input array/dictionary filter_mapper: ( T, U ) → any-- function takes in key, value returns anything. ) → {[T]: U} Filter map, however it only adds values to the return table that haven't been added before.  "},{"title":"weightedRandom​","type":1,"pageTitle":"TableUtil","url":"/OrthoUtil/api/TableUtil#weightedRandom","content":"&lt;/&gt; TableUtil.weightedRandom( values: {T},-- input array/dictionary to pick from weights: {number}-- input weights table whose indicies match to values. ) → T-- a weighted randomly picked value. Given two arrays of possible values, and weights for each of those values, pick one entry at random. "}]